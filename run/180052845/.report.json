{"created": 1607302273.939661, "duration": 0.19121408462524414, "exitcode": 0, "root": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180052845", "environment": {"Python": "3.9.0", "Platform": "Linux-5.9.11-arch2-1-x86_64-with-glibc2.32", "Packages": {"pytest": "6.1.2", "py": "1.9.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.2.4", "metadata": "1.11.0", "hypothesis": "5.41.4"}}, "summary": {"passed": 12, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_parser.py", "type": "Module"}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "type": "Function", "lineno": 69}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "type": "Function", "lineno": 81}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "type": "Function", "lineno": 85}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "type": "Function", "lineno": 89}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "type": "Function", "lineno": 94}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "type": "Function", "lineno": 99}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "type": "Function", "lineno": 104}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "type": "Function", "lineno": 112}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "type": "Function", "lineno": 116}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "type": "Function", "lineno": 120}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "type": "Function", "lineno": 125}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "type": "Function", "lineno": 133}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Instance"}]}, {"nodeid": "test_parser.py", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Class"}]}], "tests": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "lineno": 69, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_aceita_elementos_atomicos", "()"], "setup": {"duration": 0.0005569480126723647, "outcome": "passed"}, "call": {"duration": 0.06756871199468151, "outcome": "passed", "stdout": "5.63245\nnumber\t5.63245\n\n5.63245\n____________________________________________________________\n\n89\nnumber\t89\n\n89.0\n____________________________________________________________\n\n\"hello world\"\nstring\t\"hello world\"\n\nhello world\n____________________________________________________________\n\n#t\nboolean\t#t\n\nTrue\n____________________________________________________________\n\n#f\nboolean\t#f\n\nFalse\n____________________________________________________________\n\n#\\A\nchar\t#\\A\n\nA\n____________________________________________________________\n\n#\\linefeed\nchar\t#\\linefeed\n\n\n\n____________________________________________________________\n\nname-saying-something\nname\tname-saying-something\n\nSymbol(value=Token('NAME', 'name-saying-something'))\n____________________________________________________________\n\nname?\nname\tname?\n\nSymbol(value=Token('NAME', 'name?'))\n____________________________________________________________\n\n(odd? 42)\nlista\n  name\todd?\n  number\t42\n\n[Symbol(value=Token('NAME', 'odd?')), 42.0]\n____________________________________________________________\n\n(+ 1 2)\nlista\n  name\t+\n  number\t1\n  number\t2\n\n[Symbol(value=Token('NAME', '+')), 1.0, 2.0]\n____________________________________________________________\n\n(let ((x 1) (y 2)) (+ x y))\nlista\n  name\tlet\n  lista\n    lista\n      name\tx\n      number\t1\n    lista\n      name\ty\n      number\t2\n  lista\n    name\t+\n    name\tx\n    name\ty\n\n[Symbol(value=Token('NAME', 'let')), [[Symbol(value=Token('NAME', 'x')), 1.0], [Symbol(value=Token('NAME', 'y')), 2.0]], [Symbol(value=Token('NAME', '+')), Symbol(value=Token('NAME', 'x')), Symbol(value=Token('NAME', 'y'))]]\n____________________________________________________________\n\n((diff cos) x)\nlista\n  lista\n    name\tdiff\n    name\tcos\n  name\tx\n\n[[Symbol(value=Token('NAME', 'diff')), Symbol(value=Token('NAME', 'cos'))], Symbol(value=Token('NAME', 'x'))]\n____________________________________________________________\n\n'(1 2 3)\nquoted\n  lista\n    number\t1\n    number\t2\n    number\t3\n\n[Symbol(value='quote'), [1.0, 2.0, 3.0]]\n____________________________________________________________\n\n'symbol\nquoted\n  name\tsymbol\n\n[Symbol(value='quote'), Symbol(value=Token('NAME', 'symbol'))]\n____________________________________________________________\n\n''double-quote\nquoted\n  quoted\n    name\tdouble-quote\n\n[Symbol(value='quote'), [Symbol(value='quote'), Symbol(value=Token('NAME', 'double-quote'))]]\n____________________________________________________________\n\n"}, "teardown": {"duration": 0.00045338799827732146, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "lineno": 81, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_aceita_listas_simples", "()"], "setup": {"duration": 0.0004246709868311882, "outcome": "passed"}, "call": {"duration": 0.003154806006932631, "outcome": "passed"}, "teardown": {"duration": 0.0004320419975556433, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "lineno": 85, "outcome": "passed", "keywords": ["test_aceita_listas_aninhadas", "TestAnalisadorSintatico", "test_parser.py", "180052845", "()"], "setup": {"duration": 0.00045634200796484947, "outcome": "passed"}, "call": {"duration": 0.006960852013435215, "outcome": "passed"}, "teardown": {"duration": 0.0004672289942391217, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "lineno": 89, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_aceita_valor_com_quote", "()"], "setup": {"duration": 0.0005379460053518414, "outcome": "passed"}, "call": {"duration": 0.003671153011964634, "outcome": "passed"}, "teardown": {"duration": 0.0004422109923325479, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "lineno": 94, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_rejeita_listas_desalinhadas", "()"], "setup": {"duration": 0.0004321819869801402, "outcome": "passed"}, "call": {"duration": 0.0024268059933092445, "outcome": "passed"}, "teardown": {"duration": 0.00046625302638858557, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "lineno": 99, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_rejeita_quotes_inv\u00e1lidos", "()"], "setup": {"duration": 0.0003218220081180334, "outcome": "passed"}, "call": {"duration": 0.00233257602667436, "outcome": "passed"}, "teardown": {"duration": 0.0005134179955348372, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "lineno": 104, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_converte_elementos_atomicos", "()"], "setup": {"duration": 0.0003286209830548614, "outcome": "passed"}, "call": {"duration": 0.0056550239969510585, "outcome": "passed"}, "teardown": {"duration": 0.00048513899673707783, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "lineno": 112, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_converte_listas", "()"], "setup": {"duration": 0.0005232160037849098, "outcome": "passed"}, "call": {"duration": 0.005097624991321936, "outcome": "passed"}, "teardown": {"duration": 0.00044764901394955814, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "lineno": 116, "outcome": "passed", "keywords": ["test_parser.py", "TestAnalisadorSintatico", "test_converte_quotes", "180052845", "()"], "setup": {"duration": 0.0005581110017374158, "outcome": "passed"}, "call": {"duration": 0.004649942013202235, "outcome": "passed"}, "teardown": {"duration": 0.0004927540139760822, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "lineno": 120, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_converte_chars", "()"], "setup": {"duration": 0.0006636969919782132, "outcome": "passed"}, "call": {"duration": 0.0024375049979425967, "outcome": "passed"}, "teardown": {"duration": 0.0004316589911468327, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "lineno": 125, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_inclui_comando_begin_em_sequencia_de_comandos", "()"], "setup": {"duration": 0.0004189120081719011, "outcome": "passed"}, "call": {"duration": 0.004096454998943955, "outcome": "passed"}, "teardown": {"duration": 0.00044581599649973214, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "lineno": 133, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "test_parser.py", "180052845", "test_aceita_programa_completo_com_coment\u00e1rio", "()"], "setup": {"duration": 0.00047180597903206944, "outcome": "passed"}, "call": {"duration": 0.010602169000776485, "outcome": "passed", "stdout": "Testando comando\n\n        ;; Fatorial\n        (define fat (lambda (n) \n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n\n        (print (fat 5))\n        \n"}, "teardown": {"duration": 0.0004323350149206817, "outcome": "passed"}}]}