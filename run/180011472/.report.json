{"created": 1607302283.4354916, "duration": 0.20194005966186523, "exitcode": 1, "root": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472", "environment": {"Python": "3.9.0", "Platform": "Linux-5.9.11-arch2-1-x86_64-with-glibc2.32", "Packages": {"pytest": "6.1.2", "py": "1.9.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.2.4", "metadata": "1.11.0", "hypothesis": "5.41.4"}}, "summary": {"passed": 4, "failed": 8, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_parser.py", "type": "Module"}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "type": "Function", "lineno": 69}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "type": "Function", "lineno": 81}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "type": "Function", "lineno": 85}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "type": "Function", "lineno": 89}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "type": "Function", "lineno": 94}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "type": "Function", "lineno": 99}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "type": "Function", "lineno": 104}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "type": "Function", "lineno": 112}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "type": "Function", "lineno": 116}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "type": "Function", "lineno": 120}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "type": "Function", "lineno": 125}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "type": "Function", "lineno": 133}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Instance"}]}, {"nodeid": "test_parser.py", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Class"}]}], "tests": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "lineno": 69, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_aceita_elementos_atomicos"], "setup": {"duration": 0.00041588800377212465, "outcome": "passed"}, "call": {"duration": 0.05286079700454138, "outcome": "passed"}, "teardown": {"duration": 0.0003056740097235888, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "lineno": 81, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_aceita_listas_simples"], "setup": {"duration": 0.0002855829952750355, "outcome": "passed"}, "call": {"duration": 0.00535938297980465, "outcome": "passed"}, "teardown": {"duration": 0.00026284699561074376, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "lineno": 85, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_aceita_listas_aninhadas", "test_parser.py"], "setup": {"duration": 0.0003808200126513839, "outcome": "passed"}, "call": {"duration": 0.0015932499954942614, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 87, "message": "assert \"No terminal defined for '(' at line 1 col 7\\n\\n(let ((x 1) (y 2)) (+ x y))\\n      ^\\n\\nExpecting: {'NAME', 'OPERATOR'}\\n\"\n +  where \"No terminal defined for '(' at line 1 col 7\\n\\n(let ((x 1) (y 2)) (+ x y))\\n      ^\\n\\nExpecting: {'NAME', 'OPERATOR'}\\n\" = accepts('(let ((x 1) (y 2)) (+ x y))')"}, "traceback": [{"path": "test_parser.py", "lineno": 87, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3d5f40>\n\n    def test_aceita_listas_aninhadas(self):\n>       assert accepts(\"(let ((x 1) (y 2)) (+ x y))\")\nE       assert \"No terminal defined for '(' at line 1 col 7\\n\\n(let ((x 1) (y 2)) (+ x y))\\n      ^\\n\\nExpecting: {'NAME', 'OPERATOR'}\\n\"\nE        +  where \"No terminal defined for '(' at line 1 col 7\\n\\n(let ((x 1) (y 2)) (+ x y))\\n      ^\\n\\nExpecting: {'NAME', 'OPERATOR'}\\n\" = accepts('(let ((x 1) (y 2)) (+ x y))')\n\ntest_parser.py:87: AssertionError"}, "teardown": {"duration": 0.0003941670001950115, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "lineno": 89, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_aceita_valor_com_quote"], "setup": {"duration": 0.00036844698479399085, "outcome": "passed"}, "call": {"duration": 0.0006451640219893306, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 91, "message": "assert \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\"\n +  where \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" = accepts(\"'(1 2 3)\")"}, "traceback": [{"path": "test_parser.py", "lineno": 91, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3ec580>\n\n    def test_aceita_valor_com_quote(self):\n>       assert accepts(\"'(1 2 3)\")\nE       assert \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\"\nE        +  where \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" = accepts(\"'(1 2 3)\")\n\ntest_parser.py:91: AssertionError"}, "teardown": {"duration": 0.00039294600719586015, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "lineno": 94, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_rejeita_listas_desalinhadas"], "setup": {"duration": 0.0003522259939927608, "outcome": "passed"}, "call": {"duration": 0.0034413019893690944, "outcome": "passed"}, "teardown": {"duration": 0.0003577820025384426, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "lineno": 99, "outcome": "passed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_rejeita_quotes_inv\u00e1lidos"], "setup": {"duration": 0.00033953398815356195, "outcome": "passed"}, "call": {"duration": 0.0013121880183462054, "outcome": "passed"}, "teardown": {"duration": 0.0003449970099609345, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "lineno": 104, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_converte_elementos_atomicos"], "setup": {"duration": 0.0003513979900162667, "outcome": "passed"}, "call": {"duration": 0.0010150969901587814, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 106, "message": "assert Tree('start', [Tree('expression', [Token('STRING', '\"hello world\"')])]) == 'hello world'\n +  where Tree('start', [Tree('expression', [Token('STRING', '\"hello world\"')])]) = value('\"hello world\"')"}, "traceback": [{"path": "test_parser.py", "lineno": 106, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3cc640>\n\n    def test_converte_elementos_atomicos(self):\n>       assert value('\"hello world\"') == \"hello world\"\nE       assert Tree('start', [Tree('expression', [Token('STRING', '\"hello world\"')])]) == 'hello world'\nE        +  where Tree('start', [Tree('expression', [Token('STRING', '\"hello world\"')])]) = value('\"hello world\"')\n\ntest_parser.py:106: AssertionError"}, "teardown": {"duration": 0.00039611500687897205, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "lineno": 112, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_converte_listas"], "setup": {"duration": 0.0003354350046720356, "outcome": "passed"}, "call": {"duration": 0.003601588017772883, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 114, "message": "AssertionError: assert Tree('start', [Tree('expression', [Token('LPAR', '('), Tree('operator', [Token('NAME', 'max')]), Tree('expression', [Token('NAME', '1')]), 2.0, Token('RPAR', ')')])]) == [Symbol(value='max'), 1, 2]\n +  where Tree('start', [Tree('expression', [Token('LPAR', '('), Tree('operator', [Token('NAME', 'max')]), Tree('expression', [Token('NAME', '1')]), 2.0, Token('RPAR', ')')])]) = value('(max 1 2)')"}, "traceback": [{"path": "test_parser.py", "lineno": 114, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3ccc70>\n\n    def test_converte_listas(self):\n>       assert value(\"(max 1 2)\") == [symbol(\"max\"), 1, 2]\nE       AssertionError: assert Tree('start', [Tree('expression', [Token('LPAR', '('), Tree('operator', [Token('NAME', 'max')]), Tree('expression', [Token('NAME', '1')]), 2.0, Token('RPAR', ')')])]) == [Symbol(value='max'), 1, 2]\nE        +  where Tree('start', [Tree('expression', [Token('LPAR', '('), Tree('operator', [Token('NAME', 'max')]), Tree('expression', [Token('NAME', '1')]), 2.0, Token('RPAR', ')')])]) = value('(max 1 2)')\n\ntest_parser.py:114: AssertionError"}, "teardown": {"duration": 0.0003935570130124688, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "lineno": 116, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_converte_quotes"], "setup": {"duration": 0.00035453500458970666, "outcome": "passed"}, "call": {"duration": 0.000757427973439917, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 118, "message": "assert \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" == [Symbol(value='quote'), [1, 2, 3]]\n +  where \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" = value(\"'(1 2 3)\")"}, "traceback": [{"path": "test_parser.py", "lineno": 118, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd577790>\n\n    def test_converte_quotes(self):\n>       assert value(\"'(1 2 3)\") == [symbol(\"quote\"), [1, 2, 3]]\nE       assert \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" == [Symbol(value='quote'), [1, 2, 3]]\nE        +  where \"No terminal defined for ''' at line 1 col 1\\n\\n'(1 2 3)\\n^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" = value(\"'(1 2 3)\")\n\ntest_parser.py:118: AssertionError"}, "teardown": {"duration": 0.00039674999425187707, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "lineno": 120, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_converte_chars"], "setup": {"duration": 0.00027488498017191887, "outcome": "passed"}, "call": {"duration": 0.0009269930014852434, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 122, "message": "AssertionError: assert Tree('start', [Tree('expression', [Token('NAME', '#\\\\A')])]) == 'A'\n +  where Tree('start', [Tree('expression', [Token('NAME', '#\\\\A')])]) = value('#\\\\A')"}, "traceback": [{"path": "test_parser.py", "lineno": 122, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3b6a90>\n\n    def test_converte_chars(self):\n>       assert value(r\"#\\A\") == \"A\"\nE       AssertionError: assert Tree('start', [Tree('expression', [Token('NAME', '#\\\\A')])]) == 'A'\nE        +  where Tree('start', [Tree('expression', [Token('NAME', '#\\\\A')])]) = value('#\\\\A')\n\ntest_parser.py:122: AssertionError"}, "teardown": {"duration": 0.0002966570027638227, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "lineno": 125, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_inclui_comando_begin_em_sequencia_de_comandos"], "setup": {"duration": 0.00024498399579897523, "outcome": "passed"}, "call": {"duration": 0.0022361839946825057, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 127, "message": "assert \"No terminal defined for '(' at line 2 col 1\\n\\n(cmd 2)\\n^\\n\" == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\n +  where \"No terminal defined for '(' at line 2 col 1\\n\\n(cmd 2)\\n^\\n\" = value('(cmd 1)\\n(cmd 2)')"}, "traceback": [{"path": "test_parser.py", "lineno": 127, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3e6310>\n\n    def test_inclui_comando_begin_em_sequencia_de_comandos(self):\n>       assert value(\"(cmd 1)\\n(cmd 2)\") == [\n            symbol(\"begin\"),\n            [symbol(\"cmd\"), 1],\n            [symbol(\"cmd\"), 2],\n        ]\nE       assert \"No terminal defined for '(' at line 2 col 1\\n\\n(cmd 2)\\n^\\n\" == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\nE        +  where \"No terminal defined for '(' at line 2 col 1\\n\\n(cmd 2)\\n^\\n\" = value('(cmd 1)\\n(cmd 2)')\n\ntest_parser.py:127: AssertionError"}, "teardown": {"duration": 0.0004280689754523337, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "lineno": 133, "outcome": "failed", "keywords": ["TestAnalisadorSintatico", "()", "180011472", "test_parser.py", "test_aceita_programa_completo_com_coment\u00e1rio"], "setup": {"duration": 0.00035623498843051493, "outcome": "passed"}, "call": {"duration": 0.0010436369921080768, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/180011472/test_parser.py", "lineno": 147, "message": "assert \"No terminal defined for ';' at line 2 col 9\\n\\n        ;; Fatorial\\n        ^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\n +  where \"No terminal defined for ';' at line 2 col 9\\n\\n        ;; Fatorial\\n        ^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')"}, "traceback": [{"path": "test_parser.py", "lineno": 147, "message": "AssertionError"}], "stdout": "Testando comando\n\n        ;; Fatorial\n        (define fat (lambda (n) \n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n\n        (print (fat 5))\n        \n", "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f84fd3ecfa0>\n\n    def test_aceita_programa_completo_com_coment\u00e1rio(self):\n        src = \"\"\"\n        ;; Fatorial\n        (define fat (lambda (n)\n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n    \n        (print (fat 5))\n        \"\"\"\n        print(\"Testando comando\")\n        print(src)\n        s = symbol\n>       assert value(src) == [\n            s(\"begin\"),\n            [\n                s(\"define\"),\n                s(\"fat\"),\n                [\n                    s(\"lambda\"),\n                    [s(\"n\")],\n                    [\n                        s(\"if\"),\n                        [s(\"<=\"), s(\"n\"), 1],\n                        1,\n                        [s(\"*\"), s(\"n\"), [s(\"fat\"), [s(\"-\"), s(\"n\"), 1]]],\n                    ],\n                ],\n            ],\n            [s(\"print\"), [s(\"fat\"), 5]],\n        ]\nE       assert \"No terminal defined for ';' at line 2 col 9\\n\\n        ;; Fatorial\\n        ^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\nE        +  where \"No terminal defined for ';' at line 2 col 9\\n\\n        ;; Fatorial\\n        ^\\n\\nExpecting: {'NAME', 'NUMBER', 'LPAR', 'STRING'}\\n\" = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')\n\ntest_parser.py:147: AssertionError"}, "teardown": {"duration": 0.00041638000402599573, "outcome": "passed"}}]}