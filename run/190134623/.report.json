{"created": 1607302286.517898, "duration": 0.1951606273651123, "exitcode": 1, "root": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/190134623", "environment": {"Python": "3.9.0", "Platform": "Linux-5.9.11-arch2-1-x86_64-with-glibc2.32", "Packages": {"pytest": "6.1.2", "py": "1.9.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.2.4", "metadata": "1.11.0", "hypothesis": "5.41.4"}}, "summary": {"passed": 7, "failed": 5, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_parser.py", "type": "Module"}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "type": "Function", "lineno": 69}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "type": "Function", "lineno": 81}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "type": "Function", "lineno": 85}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "type": "Function", "lineno": 89}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "type": "Function", "lineno": 94}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "type": "Function", "lineno": 99}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "type": "Function", "lineno": 104}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "type": "Function", "lineno": 112}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "type": "Function", "lineno": 116}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "type": "Function", "lineno": 120}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "type": "Function", "lineno": 125}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "type": "Function", "lineno": 133}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Instance"}]}, {"nodeid": "test_parser.py", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Class"}]}], "tests": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "lineno": 69, "outcome": "passed", "keywords": ["()", "TestAnalisadorSintatico", "test_aceita_elementos_atomicos", "test_parser.py", "190134623"], "setup": {"duration": 0.0003260750090703368, "outcome": "passed"}, "call": {"duration": 0.054245842999080196, "outcome": "passed"}, "teardown": {"duration": 0.0003064040211029351, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "lineno": 81, "outcome": "passed", "keywords": ["test_aceita_listas_simples", "()", "TestAnalisadorSintatico", "test_parser.py", "190134623"], "setup": {"duration": 0.00027608900563791394, "outcome": "passed"}, "call": {"duration": 0.0035981760011054575, "outcome": "passed"}, "teardown": {"duration": 0.0002770099963527173, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "lineno": 85, "outcome": "passed", "keywords": ["()", "TestAnalisadorSintatico", "test_parser.py", "190134623", "test_aceita_listas_aninhadas"], "setup": {"duration": 0.0002582280139904469, "outcome": "passed"}, "call": {"duration": 0.006213804997969419, "outcome": "passed"}, "teardown": {"duration": 0.0002854790072888136, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "lineno": 89, "outcome": "passed", "keywords": ["()", "TestAnalisadorSintatico", "test_aceita_valor_com_quote", "test_parser.py", "190134623"], "setup": {"duration": 0.0002696329902391881, "outcome": "passed"}, "call": {"duration": 0.002620829996885732, "outcome": "passed"}, "teardown": {"duration": 0.00024088099598884583, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "lineno": 94, "outcome": "passed", "keywords": ["test_rejeita_listas_desalinhadas", "()", "TestAnalisadorSintatico", "test_parser.py", "190134623"], "setup": {"duration": 0.00028845699853263795, "outcome": "passed"}, "call": {"duration": 0.0028433319821488112, "outcome": "passed"}, "teardown": {"duration": 0.00024591601686552167, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "lineno": 99, "outcome": "passed", "keywords": ["()", "TestAnalisadorSintatico", "test_rejeita_quotes_inv\u00e1lidos", "test_parser.py", "190134623"], "setup": {"duration": 0.00025957502657547593, "outcome": "passed"}, "call": {"duration": 0.0022252430208027363, "outcome": "passed"}, "teardown": {"duration": 0.0002829899895004928, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "lineno": 104, "outcome": "passed", "keywords": ["test_converte_elementos_atomicos", "()", "TestAnalisadorSintatico", "test_parser.py", "190134623"], "setup": {"duration": 0.0002619030128698796, "outcome": "passed"}, "call": {"duration": 0.004393532988615334, "outcome": "passed"}, "teardown": {"duration": 0.0002637550060171634, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "lineno": 112, "outcome": "failed", "keywords": ["test_converte_listas", "()", "TestAnalisadorSintatico", "test_parser.py", "190134623"], "setup": {"duration": 0.00024474397650919855, "outcome": "passed"}, "call": {"duration": 0.0023908709990791976, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/190134623/test_parser.py", "lineno": 114, "message": "AssertionError: assert Tree('start', [Symbol(value='max'), 1.0, 2.0]) == [Symbol(value='max'), 1, 2]\n +  where Tree('start', [Symbol(value='max'), 1.0, 2.0]) = value('(max 1 2)')"}, "traceback": [{"path": "test_parser.py", "lineno": 114, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7facfb7a6d00>\n\n    def test_converte_listas(self):\n>       assert value(\"(max 1 2)\") == [symbol(\"max\"), 1, 2]\nE       AssertionError: assert Tree('start', [Symbol(value='max'), 1.0, 2.0]) == [Symbol(value='max'), 1, 2]\nE        +  where Tree('start', [Symbol(value='max'), 1.0, 2.0]) = value('(max 1 2)')\n\ntest_parser.py:114: AssertionError"}, "teardown": {"duration": 0.00030282698571681976, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "lineno": 116, "outcome": "failed", "keywords": ["()", "test_converte_quotes", "TestAnalisadorSintatico", "test_parser.py", "190134623"], "setup": {"duration": 0.0002562660083640367, "outcome": "passed"}, "call": {"duration": 0.0013525979884434491, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/190134623/test_parser.py", "lineno": 118, "message": "assert Tree('symbol', [Token('QUOTE', \"'(1 2 3)\")]) == [Symbol(value='quote'), [1, 2, 3]]\n +  where Tree('symbol', [Token('QUOTE', \"'(1 2 3)\")]) = value(\"'(1 2 3)\")"}, "traceback": [{"path": "test_parser.py", "lineno": 118, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7facfb85b370>\n\n    def test_converte_quotes(self):\n>       assert value(\"'(1 2 3)\") == [symbol(\"quote\"), [1, 2, 3]]\nE       assert Tree('symbol', [Token('QUOTE', \"'(1 2 3)\")]) == [Symbol(value='quote'), [1, 2, 3]]\nE        +  where Tree('symbol', [Token('QUOTE', \"'(1 2 3)\")]) = value(\"'(1 2 3)\")\n\ntest_parser.py:118: AssertionError"}, "teardown": {"duration": 0.00040158399497158825, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "lineno": 120, "outcome": "failed", "keywords": ["()", "TestAnalisadorSintatico", "test_parser.py", "test_converte_chars", "190134623"], "setup": {"duration": 0.0002724330115597695, "outcome": "passed"}, "call": {"duration": 0.0011183640162926167, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/190134623/test_parser.py", "lineno": 122, "message": "AssertionError: assert Symbol(value=Token('CHAR', '#\\\\A')) == 'A'\n +  where Symbol(value=Token('CHAR', '#\\\\A')) = value('#\\\\A')"}, "traceback": [{"path": "test_parser.py", "lineno": 122, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7facfb7db820>\n\n    def test_converte_chars(self):\n>       assert value(r\"#\\A\") == \"A\"\nE       AssertionError: assert Symbol(value=Token('CHAR', '#\\\\A')) == 'A'\nE        +  where Symbol(value=Token('CHAR', '#\\\\A')) = value('#\\\\A')\n\ntest_parser.py:122: AssertionError"}, "teardown": {"duration": 0.0004596840008161962, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "lineno": 125, "outcome": "failed", "keywords": ["()", "TestAnalisadorSintatico", "test_parser.py", "190134623", "test_inclui_comando_begin_em_sequencia_de_comandos"], "setup": {"duration": 0.0002759879862423986, "outcome": "passed"}, "call": {"duration": 0.0027896009851247072, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/190134623/test_parser.py", "lineno": 127, "message": "AssertionError: assert Tree('start', [[Symbol(value='cmd'), 1.0], [Symbol(value='cmd'), 2.0]]) == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\n +  where Tree('start', [[Symbol(value='cmd'), 1.0], [Symbol(value='cmd'), 2.0]]) = value('(cmd 1)\\n(cmd 2)')"}, "traceback": [{"path": "test_parser.py", "lineno": 127, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7facfb7c3d30>\n\n    def test_inclui_comando_begin_em_sequencia_de_comandos(self):\n>       assert value(\"(cmd 1)\\n(cmd 2)\") == [\n            symbol(\"begin\"),\n            [symbol(\"cmd\"), 1],\n            [symbol(\"cmd\"), 2],\n        ]\nE       AssertionError: assert Tree('start', [[Symbol(value='cmd'), 1.0], [Symbol(value='cmd'), 2.0]]) == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\nE        +  where Tree('start', [[Symbol(value='cmd'), 1.0], [Symbol(value='cmd'), 2.0]]) = value('(cmd 1)\\n(cmd 2)')\n\ntest_parser.py:127: AssertionError"}, "teardown": {"duration": 0.00039974600076675415, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "lineno": 133, "outcome": "failed", "keywords": ["test_aceita_programa_completo_com_coment\u00e1rio", "()", "TestAnalisadorSintatico", "test_parser.py", "190134623"], "setup": {"duration": 0.0003241709782741964, "outcome": "passed"}, "call": {"duration": 0.0026941560208797455, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/190134623/test_parser.py", "lineno": 147, "message": "assert \"No terminal defined for '(' at line 3 col 29\\n\\n        (define fat (lambda (n) \\n                            ^\\n\\nExpecting: {'__ANON_1', 'NUMBER', 'BOOL', 'NAME', 'CHAR', 'STRING'}\\n\" == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\n +  where \"No terminal defined for '(' at line 3 col 29\\n\\n        (define fat (lambda (n) \\n                            ^\\n\\nExpecting: {'__ANON_1', 'NUMBER', 'BOOL', 'NAME', 'CHAR', 'STRING'}\\n\" = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')"}, "traceback": [{"path": "test_parser.py", "lineno": 147, "message": "AssertionError"}], "stdout": "Testando comando\n\n        ;; Fatorial\n        (define fat (lambda (n) \n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n\n        (print (fat 5))\n        \n", "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7facfb7ac0a0>\n\n    def test_aceita_programa_completo_com_coment\u00e1rio(self):\n        src = \"\"\"\n        ;; Fatorial\n        (define fat (lambda (n)\n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n    \n        (print (fat 5))\n        \"\"\"\n        print(\"Testando comando\")\n        print(src)\n        s = symbol\n>       assert value(src) == [\n            s(\"begin\"),\n            [\n                s(\"define\"),\n                s(\"fat\"),\n                [\n                    s(\"lambda\"),\n                    [s(\"n\")],\n                    [\n                        s(\"if\"),\n                        [s(\"<=\"), s(\"n\"), 1],\n                        1,\n                        [s(\"*\"), s(\"n\"), [s(\"fat\"), [s(\"-\"), s(\"n\"), 1]]],\n                    ],\n                ],\n            ],\n            [s(\"print\"), [s(\"fat\"), 5]],\n        ]\nE       assert \"No terminal defined for '(' at line 3 col 29\\n\\n        (define fat (lambda (n) \\n                            ^\\n\\nExpecting: {'__ANON_1', 'NUMBER', 'BOOL', 'NAME', 'CHAR', 'STRING'}\\n\" == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\nE        +  where \"No terminal defined for '(' at line 3 col 29\\n\\n        (define fat (lambda (n) \\n                            ^\\n\\nExpecting: {'__ANON_1', 'NUMBER', 'BOOL', 'NAME', 'CHAR', 'STRING'}\\n\" = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')\n\ntest_parser.py:147: AssertionError"}, "teardown": {"duration": 0.0004629280010703951, "outcome": "passed"}}]}