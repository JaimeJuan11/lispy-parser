{"created": 1607302282.6145148, "duration": 0.3841283321380615, "exitcode": 1, "root": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150132590", "environment": {"Python": "3.9.0", "Platform": "Linux-5.9.11-arch2-1-x86_64-with-glibc2.32", "Packages": {"pytest": "6.1.2", "py": "1.9.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.2.4", "metadata": "1.11.0", "hypothesis": "5.41.4"}}, "summary": {"passed": 9, "failed": 3, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_parser.py", "type": "Module"}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "type": "Function", "lineno": 69}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "type": "Function", "lineno": 81}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "type": "Function", "lineno": 85}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "type": "Function", "lineno": 89}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "type": "Function", "lineno": 94}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "type": "Function", "lineno": 99}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "type": "Function", "lineno": 104}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "type": "Function", "lineno": 112}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "type": "Function", "lineno": 116}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "type": "Function", "lineno": 120}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "type": "Function", "lineno": 125}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "type": "Function", "lineno": 133}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Instance"}]}, {"nodeid": "test_parser.py", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Class"}]}], "tests": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "lineno": 69, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "test_aceita_elementos_atomicos", "TestAnalisadorSintatico"], "setup": {"duration": 0.00041484099347144365, "outcome": "passed"}, "call": {"duration": 0.06793789201765321, "outcome": "passed"}, "teardown": {"duration": 0.0004136800125706941, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "lineno": 81, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "TestAnalisadorSintatico", "test_aceita_listas_simples"], "setup": {"duration": 0.00036315800389274955, "outcome": "passed"}, "call": {"duration": 0.012616928986972198, "outcome": "passed"}, "teardown": {"duration": 0.000364834995707497, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "lineno": 85, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "test_aceita_listas_aninhadas", "TestAnalisadorSintatico"], "setup": {"duration": 0.0002813820028677583, "outcome": "passed"}, "call": {"duration": 0.032329120993381366, "outcome": "passed"}, "teardown": {"duration": 0.00033213102142326534, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "lineno": 89, "outcome": "passed", "keywords": ["test_aceita_valor_com_quote", "150132590", "()", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00030273900483734906, "outcome": "passed"}, "call": {"duration": 0.015766980010084808, "outcome": "passed"}, "teardown": {"duration": 0.000345556007232517, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "lineno": 94, "outcome": "failed", "keywords": ["150132590", "()", "test_parser.py", "TestAnalisadorSintatico", "test_rejeita_listas_desalinhadas"], "setup": {"duration": 0.00038269400829449296, "outcome": "passed"}, "call": {"duration": 0.017193424981087446, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150132590/test_parser.py", "lineno": 98, "message": "AssertionError: assert False\n +  where False = rejects('(a b))')"}, "traceback": [{"path": "test_parser.py", "lineno": 98, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7fa973c474f0>\n\n    def test_rejeita_listas_desalinhadas(self):\n        assert rejects(\")a b c(\")\n        assert rejects(\"(a b\")\n>       assert rejects(\"(a b))\")\nE       AssertionError: assert False\nE        +  where False = rejects('(a b))')\n\ntest_parser.py:98: AssertionError"}, "teardown": {"duration": 0.0003389609919395298, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "lineno": 99, "outcome": "passed", "keywords": ["test_rejeita_quotes_inv\u00e1lidos", "150132590", "()", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00039498601108789444, "outcome": "passed"}, "call": {"duration": 0.007209963980130851, "outcome": "passed"}, "teardown": {"duration": 0.00043580899364314973, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "lineno": 104, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "test_converte_elementos_atomicos", "TestAnalisadorSintatico"], "setup": {"duration": 0.00039437899249605834, "outcome": "passed"}, "call": {"duration": 0.015058796008815989, "outcome": "passed"}, "teardown": {"duration": 0.00033865601290017366, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "lineno": 112, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "test_converte_listas", "TestAnalisadorSintatico"], "setup": {"duration": 0.0002919789985753596, "outcome": "passed"}, "call": {"duration": 0.020953098981408402, "outcome": "passed"}, "teardown": {"duration": 0.0003225830150768161, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "lineno": 116, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "test_converte_quotes", "TestAnalisadorSintatico"], "setup": {"duration": 0.00029939800151623785, "outcome": "passed"}, "call": {"duration": 0.01302415199461393, "outcome": "passed"}, "teardown": {"duration": 0.0003308609884697944, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "lineno": 120, "outcome": "passed", "keywords": ["150132590", "()", "test_parser.py", "test_converte_chars", "TestAnalisadorSintatico"], "setup": {"duration": 0.00028951498097740114, "outcome": "passed"}, "call": {"duration": 0.007587870990391821, "outcome": "passed"}, "teardown": {"duration": 0.00036507801269181073, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "lineno": 125, "outcome": "failed", "keywords": ["150132590", "()", "test_parser.py", "TestAnalisadorSintatico", "test_inclui_comando_begin_em_sequencia_de_comandos"], "setup": {"duration": 0.00029103000997565687, "outcome": "passed"}, "call": {"duration": 0.010311123012797907, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150132590/test_parser.py", "lineno": 127, "message": "AssertionError: assert Tree('start', [[Symbol(value=Token('__ANON_0', 'cmd')), 1], [Symbol(value=Token('__ANON_0', 'cmd')), 2]]) == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\n +  where Tree('start', [[Symbol(value=Token('__ANON_0', 'cmd')), 1], [Symbol(value=Token('__ANON_0', 'cmd')), 2]]) = value('(cmd 1)\\n(cmd 2)')"}, "traceback": [{"path": "test_parser.py", "lineno": 127, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7fa973bfe760>\n\n    def test_inclui_comando_begin_em_sequencia_de_comandos(self):\n>       assert value(\"(cmd 1)\\n(cmd 2)\") == [\n            symbol(\"begin\"),\n            [symbol(\"cmd\"), 1],\n            [symbol(\"cmd\"), 2],\n        ]\nE       AssertionError: assert Tree('start', [[Symbol(value=Token('__ANON_0', 'cmd')), 1], [Symbol(value=Token('__ANON_0', 'cmd')), 2]]) == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\nE        +  where Tree('start', [[Symbol(value=Token('__ANON_0', 'cmd')), 1], [Symbol(value=Token('__ANON_0', 'cmd')), 2]]) = value('(cmd 1)\\n(cmd 2)')\n\ntest_parser.py:127: AssertionError"}, "teardown": {"duration": 0.0003365890006534755, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "lineno": 133, "outcome": "failed", "keywords": ["test_aceita_programa_completo_com_coment\u00e1rio", "150132590", "()", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.0002642410108819604, "outcome": "passed"}, "call": {"duration": 0.05717673699837178, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150132590/test_parser.py", "lineno": 147, "message": "AssertionError: assert Tree('start', [[Symbol(value=Token('__ANON_0', 'define')), Symbol(value=Token('__ANON_0', 'fat')), [Symbol(value=Token...n('__ANON_0', 'n')), 1]]]]]], [Symbol(value=Token('__ANON_0', 'print')), [Symbol(value=Token('__ANON_0', 'fat')), 5]]]) == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\n +  where Tree('start', [[Symbol(value=Token('__ANON_0', 'define')), Symbol(value=Token('__ANON_0', 'fat')), [Symbol(value=Token...n('__ANON_0', 'n')), 1]]]]]], [Symbol(value=Token('__ANON_0', 'print')), [Symbol(value=Token('__ANON_0', 'fat')), 5]]]) = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')"}, "traceback": [{"path": "test_parser.py", "lineno": 147, "message": "AssertionError"}], "stdout": "Testando comando\n\n        ;; Fatorial\n        (define fat (lambda (n) \n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n\n        (print (fat 5))\n        \n", "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7fa973bac670>\n\n    def test_aceita_programa_completo_com_coment\u00e1rio(self):\n        src = \"\"\"\n        ;; Fatorial\n        (define fat (lambda (n)\n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n    \n        (print (fat 5))\n        \"\"\"\n        print(\"Testando comando\")\n        print(src)\n        s = symbol\n>       assert value(src) == [\n            s(\"begin\"),\n            [\n                s(\"define\"),\n                s(\"fat\"),\n                [\n                    s(\"lambda\"),\n                    [s(\"n\")],\n                    [\n                        s(\"if\"),\n                        [s(\"<=\"), s(\"n\"), 1],\n                        1,\n                        [s(\"*\"), s(\"n\"), [s(\"fat\"), [s(\"-\"), s(\"n\"), 1]]],\n                    ],\n                ],\n            ],\n            [s(\"print\"), [s(\"fat\"), 5]],\n        ]\nE       AssertionError: assert Tree('start', [[Symbol(value=Token('__ANON_0', 'define')), Symbol(value=Token('__ANON_0', 'fat')), [Symbol(value=Token...n('__ANON_0', 'n')), 1]]]]]], [Symbol(value=Token('__ANON_0', 'print')), [Symbol(value=Token('__ANON_0', 'fat')), 5]]]) == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\nE        +  where Tree('start', [[Symbol(value=Token('__ANON_0', 'define')), Symbol(value=Token('__ANON_0', 'fat')), [Symbol(value=Token...n('__ANON_0', 'n')), 1]]]]]], [Symbol(value=Token('__ANON_0', 'print')), [Symbol(value=Token('__ANON_0', 'fat')), 5]]]) = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')\n\ntest_parser.py:147: AssertionError"}, "teardown": {"duration": 0.0003718570224009454, "outcome": "passed"}}]}