{"created": 1607302272.2489936, "duration": 0.2297656536102295, "exitcode": 1, "root": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150078692", "environment": {"Python": "3.9.0", "Platform": "Linux-5.9.11-arch2-1-x86_64-with-glibc2.32", "Packages": {"pytest": "6.1.2", "py": "1.9.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.2.4", "metadata": "1.11.0", "hypothesis": "5.41.4"}}, "summary": {"failed": 5, "passed": 7, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_parser.py", "type": "Module"}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "type": "Function", "lineno": 69}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "type": "Function", "lineno": 81}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "type": "Function", "lineno": 85}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "type": "Function", "lineno": 89}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "type": "Function", "lineno": 94}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "type": "Function", "lineno": 99}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "type": "Function", "lineno": 104}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "type": "Function", "lineno": 112}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "type": "Function", "lineno": 116}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "type": "Function", "lineno": 120}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "type": "Function", "lineno": 125}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "type": "Function", "lineno": 133}]}, {"nodeid": "test_parser.py::TestAnalisadorSintatico", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Instance"}]}, {"nodeid": "test_parser.py", "outcome": "passed", "result": [{"nodeid": "test_parser.py::TestAnalisadorSintatico", "type": "Class"}]}], "tests": [{"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_elementos_atomicos", "lineno": 69, "outcome": "failed", "keywords": ["()", "test_aceita_elementos_atomicos", "150078692", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00046355699305422604, "outcome": "passed"}, "call": {"duration": 0.05797462200280279, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150078692/test_parser.py", "lineno": 80, "message": "AssertionError: rejeitou comando \"#t\"\nassert \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\"\n +  where \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\" = accepts('#t')"}, "traceback": [{"path": "test_parser.py", "lineno": 80, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f607dbb9c40>\n\n    def test_aceita_elementos_atomicos(self):\n        for src in [\n            '\"hello world\"',\n            \"42\",\n            \"3.1415\",\n            \"#t\",\n            \"#\\\\A\",\n            \"some-lispy-name\",\n            \"name?\",\n        ]:\n>           assert accepts(src), f'rejeitou comando \"{src}\"'\nE           AssertionError: rejeitou comando \"#t\"\nE           assert \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\"\nE            +  where \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\" = accepts('#t')\n\ntest_parser.py:80: AssertionError"}, "teardown": {"duration": 0.0005289599939715117, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_simples", "lineno": 81, "outcome": "passed", "keywords": ["()", "test_aceita_listas_simples", "150078692", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.0003200629726052284, "outcome": "passed"}, "call": {"duration": 0.0035817169991787523, "outcome": "passed"}, "teardown": {"duration": 0.00039858699892647564, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_listas_aninhadas", "lineno": 85, "outcome": "passed", "keywords": ["()", "150078692", "test_parser.py", "TestAnalisadorSintatico", "test_aceita_listas_aninhadas"], "setup": {"duration": 0.0004097290220670402, "outcome": "passed"}, "call": {"duration": 0.007479816005798057, "outcome": "passed"}, "teardown": {"duration": 0.0003648530109785497, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_valor_com_quote", "lineno": 89, "outcome": "passed", "keywords": ["()", "150078692", "test_parser.py", "test_aceita_valor_com_quote", "TestAnalisadorSintatico"], "setup": {"duration": 0.0003936809953302145, "outcome": "passed"}, "call": {"duration": 0.003774628014070913, "outcome": "passed"}, "teardown": {"duration": 0.00035289701190777123, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_listas_desalinhadas", "lineno": 94, "outcome": "passed", "keywords": ["()", "150078692", "test_rejeita_listas_desalinhadas", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00043802798609249294, "outcome": "passed"}, "call": {"duration": 0.0024878270050976425, "outcome": "passed"}, "teardown": {"duration": 0.0003669779980555177, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_rejeita_quotes_inv\u00e1lidos", "lineno": 99, "outcome": "passed", "keywords": ["()", "150078692", "test_parser.py", "TestAnalisadorSintatico", "test_rejeita_quotes_inv\u00e1lidos"], "setup": {"duration": 0.0003932200197596103, "outcome": "passed"}, "call": {"duration": 0.0017129930201917887, "outcome": "passed"}, "teardown": {"duration": 0.0003510350070428103, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_elementos_atomicos", "lineno": 104, "outcome": "failed", "keywords": ["()", "test_converte_elementos_atomicos", "150078692", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00036480100243352354, "outcome": "passed"}, "call": {"duration": 0.003100535017438233, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150078692/test_parser.py", "lineno": 109, "message": "assert \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\" is True\n +  where \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\" = value('#t')"}, "traceback": [{"path": "test_parser.py", "lineno": 109, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f607e42ee80>\n\n    def test_converte_elementos_atomicos(self):\n        assert value('\"hello world\"') == \"hello world\"\n        assert value(\"42\") == 42.0\n        assert value(\"3.1415\") == 3.1415\n>       assert value(\"#t\") is True\nE       assert \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\" is True\nE        +  where \"No terminal defined for '#' at line 1 col 1\\n\\n#t\\n^\\n\\nExpecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\\n\" = value('#t')\n\ntest_parser.py:109: AssertionError"}, "teardown": {"duration": 0.0004386060172691941, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_listas", "lineno": 112, "outcome": "passed", "keywords": ["()", "150078692", "test_parser.py", "test_converte_listas", "TestAnalisadorSintatico"], "setup": {"duration": 0.0004004809889011085, "outcome": "passed"}, "call": {"duration": 0.0056092520244419575, "outcome": "passed"}, "teardown": {"duration": 0.00035702300374396145, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_quotes", "lineno": 116, "outcome": "passed", "keywords": ["test_converte_quotes", "()", "150078692", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00040305498987436295, "outcome": "passed"}, "call": {"duration": 0.0036310960131231695, "outcome": "passed"}, "teardown": {"duration": 0.0002870490134228021, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_converte_chars", "lineno": 120, "outcome": "failed", "keywords": ["()", "test_converte_chars", "150078692", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00027153099654242396, "outcome": "passed"}, "call": {"duration": 0.0011100659903604537, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150078692/test_parser.py", "lineno": 122, "message": "assert \"No terminal ..., 'NUMBER'}\\n\" == 'A'\n  - A\n  + No terminal defined for '#' at line 1 col 1\n  + \n  + #\\A\n  + ^\n  + \n  + Expecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}"}, "traceback": [{"path": "test_parser.py", "lineno": 122, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f607dad0c10>\n\n    def test_converte_chars(self):\n>       assert value(r\"#\\A\") == \"A\"\nE       assert \"No terminal ..., 'NUMBER'}\\n\" == 'A'\nE         - A\nE         + No terminal defined for '#' at line 1 col 1\nE         + \nE         + #\\A\nE         + ^\nE         + \nE         + Expecting: {'FALSE', 'LPAR', 'NULL', 'SYMBOL', 'STRING', 'QUOTE', 'NAME', 'TRUE', 'NUMBER'}\n\ntest_parser.py:122: AssertionError"}, "teardown": {"duration": 0.0005368959973566234, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_inclui_comando_begin_em_sequencia_de_comandos", "lineno": 125, "outcome": "failed", "keywords": ["()", "150078692", "test_inclui_comando_begin_em_sequencia_de_comandos", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.00029685802292078733, "outcome": "passed"}, "call": {"duration": 0.0035074060142505914, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150078692/test_parser.py", "lineno": 127, "message": "AssertionError: assert Tree('start', [[Symbol(value=Token('NAME', 'cmd')), 1.0], [Symbol(value=Token('NAME', 'cmd')), 2.0]]) == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\n +  where Tree('start', [[Symbol(value=Token('NAME', 'cmd')), 1.0], [Symbol(value=Token('NAME', 'cmd')), 2.0]]) = value('(cmd 1)\\n(cmd 2)')"}, "traceback": [{"path": "test_parser.py", "lineno": 127, "message": "AssertionError"}], "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f607db168b0>\n\n    def test_inclui_comando_begin_em_sequencia_de_comandos(self):\n>       assert value(\"(cmd 1)\\n(cmd 2)\") == [\n            symbol(\"begin\"),\n            [symbol(\"cmd\"), 1],\n            [symbol(\"cmd\"), 2],\n        ]\nE       AssertionError: assert Tree('start', [[Symbol(value=Token('NAME', 'cmd')), 1.0], [Symbol(value=Token('NAME', 'cmd')), 2.0]]) == [Symbol(value='begin'), [Symbol(value='cmd'), 1], [Symbol(value='cmd'), 2]]\nE        +  where Tree('start', [[Symbol(value=Token('NAME', 'cmd')), 1.0], [Symbol(value=Token('NAME', 'cmd')), 2.0]]) = value('(cmd 1)\\n(cmd 2)')\n\ntest_parser.py:127: AssertionError"}, "teardown": {"duration": 0.0005337610200513154, "outcome": "passed"}}, {"nodeid": "test_parser.py::TestAnalisadorSintatico::test_aceita_programa_completo_com_coment\u00e1rio", "lineno": 133, "outcome": "failed", "keywords": ["()", "test_aceita_programa_completo_com_coment\u00e1rio", "150078692", "test_parser.py", "TestAnalisadorSintatico"], "setup": {"duration": 0.0004623560234904289, "outcome": "passed"}, "call": {"duration": 0.011523068009410053, "outcome": "failed", "crash": {"path": "/home/chips/aulas/compiladores/trabalhos/lispy-parser/run/150078692/test_parser.py", "lineno": 147, "message": "AssertionError: assert Tree('start', [[Symbol(value=Token('NAME', 'define')), Symbol(value=Token('NAME', 'fat')), [Symbol(value=Token('NAME',...lue=Token('NAME', 'n')), 1.0]]]]]], [Symbol(value=Token('NAME', 'print')), [Symbol(value=Token('NAME', 'fat')), 5.0]]]) == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\n +  where Tree('start', [[Symbol(value=Token('NAME', 'define')), Symbol(value=Token('NAME', 'fat')), [Symbol(value=Token('NAME',...lue=Token('NAME', 'n')), 1.0]]]]]], [Symbol(value=Token('NAME', 'print')), [Symbol(value=Token('NAME', 'fat')), 5.0]]]) = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')"}, "traceback": [{"path": "test_parser.py", "lineno": 147, "message": "AssertionError"}], "stdout": "Testando comando\n\n        ;; Fatorial\n        (define fat (lambda (n) \n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n\n        (print (fat 5))\n        \n", "longrepr": "self = <test_parser.TestAnalisadorSintatico object at 0x7f607dad0460>\n\n    def test_aceita_programa_completo_com_coment\u00e1rio(self):\n        src = \"\"\"\n        ;; Fatorial\n        (define fat (lambda (n)\n            (if (<= n 1)\n                1\n                (* n (fat (- n 1))))))\n    \n        (print (fat 5))\n        \"\"\"\n        print(\"Testando comando\")\n        print(src)\n        s = symbol\n>       assert value(src) == [\n            s(\"begin\"),\n            [\n                s(\"define\"),\n                s(\"fat\"),\n                [\n                    s(\"lambda\"),\n                    [s(\"n\")],\n                    [\n                        s(\"if\"),\n                        [s(\"<=\"), s(\"n\"), 1],\n                        1,\n                        [s(\"*\"), s(\"n\"), [s(\"fat\"), [s(\"-\"), s(\"n\"), 1]]],\n                    ],\n                ],\n            ],\n            [s(\"print\"), [s(\"fat\"), 5]],\n        ]\nE       AssertionError: assert Tree('start', [[Symbol(value=Token('NAME', 'define')), Symbol(value=Token('NAME', 'fat')), [Symbol(value=Token('NAME',...lue=Token('NAME', 'n')), 1.0]]]]]], [Symbol(value=Token('NAME', 'print')), [Symbol(value=Token('NAME', 'fat')), 5.0]]]) == [Symbol(value='begin'), [Symbol(value='define'), Symbol(value='fat'), [Symbol(value='lambda'), [Symbol(value='n')], [S...bol(value='*'), Symbol(value='n'), [Symbol(value='fat'), [...]]]]]], [Symbol(value='print'), [Symbol(value='fat'), 5]]]\nE        +  where Tree('start', [[Symbol(value=Token('NAME', 'define')), Symbol(value=Token('NAME', 'fat')), [Symbol(value=Token('NAME',...lue=Token('NAME', 'n')), 1.0]]]]]], [Symbol(value=Token('NAME', 'print')), [Symbol(value=Token('NAME', 'fat')), 5.0]]]) = value('\\n        ;; Fatorial\\n        (define fat (lambda (n) \\n            (if (<= n 1)\\n                1\\n                (* n (fat (- n 1))))))\\n\\n        (print (fat 5))\\n        ')\n\ntest_parser.py:147: AssertionError"}, "teardown": {"duration": 0.00044427497778087854, "outcome": "passed"}}]}